package com.owen1212055.particlehelper.api.type;

import com.owen1212055.particlehelper.api.particle.Particle;
import com.owen1212055.particlehelper.api.particle.types.*;
import com.owen1212055.particlehelper.api.particle.types.common.SimpleMultiParticle;
import com.owen1212055.particlehelper.api.particle.types.common.SimpleSingleParticle;
import com.owen1212055.particlehelper.api.particle.types.common.blockdata.MultiBlockDataParticle;
import com.owen1212055.particlehelper.api.particle.types.common.blockdata.SingleBlockDataParticle;
import com.owen1212055.particlehelper.api.particle.types.common.destination.DestinationParticleImpl;
import com.owen1212055.particlehelper.api.particle.types.common.reducedmomentum.ReducedMomentumParticle;
import com.owen1212055.particlehelper.api.particle.types.common.size.MultiSizeParticle;
import com.owen1212055.particlehelper.api.particle.types.common.size.SizeParticleImpl;
import com.owen1212055.particlehelper.api.particle.types.common.velocity.MultiSpeedModifiableParticle;
import com.owen1212055.particlehelper.api.particle.types.common.velocity.VelocityParticle;
import com.owen1212055.particlehelper.api.particle.types.common.velocity.YVelocityParticle;
import com.owen1212055.particlehelper.api.particle.types.dust.MultiDustParticle;
import com.owen1212055.particlehelper.api.particle.types.dust.SingleDustParticle;
import com.owen1212055.particlehelper.api.particle.types.dust.transition.MultiDustTransitionParticle;
import com.owen1212055.particlehelper.api.particle.types.dust.transition.SingleDustTransitionParticle;
import com.owen1212055.particlehelper.api.particle.types.entityeffect.MultiEntityEffectParticle;
import com.owen1212055.particlehelper.api.particle.types.entityeffect.SingleEntityEffectParticle;
import com.owen1212055.particlehelper.api.particle.types.itemcrack.MultiItemCrackParticle;
import com.owen1212055.particlehelper.api.particle.types.itemcrack.SingleItemCrackParticle;
import com.owen1212055.particlehelper.api.particle.types.note.MultiNoteParticle;
import com.owen1212055.particlehelper.api.particle.types.note.SingleNoteParticle;
import com.owen1212055.particlehelper.api.particle.types.sculkcharge.MultiSculkChargeParticle;
import com.owen1212055.particlehelper.api.particle.types.sculkcharge.SingleSculkChargeParticle;
import com.owen1212055.particlehelper.api.particle.types.shriek.MultiShriekParticle;
import com.owen1212055.particlehelper.api.particle.types.shriek.SingleShriekParticle;
import com.owen1212055.particlehelper.api.particle.types.vibration.MultiVibrationParticle;
import com.owen1212055.particlehelper.api.particle.types.vibration.SingleVibrationParticle;
import com.owen1212055.particlehelper.api.particle.types.vibration.VibrationParticle;
import org.bukkit.NamespacedKey;

import java.util.function.Function;

public interface Particles {

    ParticleType<SingleEntityEffectParticle, MultiEntityEffectParticle> AMBIENT_ENTITY_EFFECT = of("ambient_entity_effect", SingleEntityEffectParticle::new, MultiEntityEffectParticle::new);
    StaticParticle ANGRY_VILLAGER = ofStatic("angry_villager");
    StaticParticle ASH = ofStatic("ash");
    ParticleType<BlockDataParticle, MultiBlockDataParticle> BLOCK = of("block", SingleBlockDataParticle::new, MultiBlockDataParticle::new);
    ParticleType<BlockDataParticle, MultiBlockDataParticle> BLOCK_MARKER = of("block_marker", SingleBlockDataParticle::new, MultiBlockDataParticle::new);
    MoveableParticle BUBBLE = ofMoveable("bubble");
    MoveableParticle BUBBLE_COLUMN_UP = ofMoveable("bubble_column_up");
    MoveableParticle BUBBLE_POP = ofMoveable("bubble_pop");
    MoveableParticle CAMPFIRE_COSY_SMOKE = ofMoveable("campfire_cosy_smoke");
    MoveableParticle CAMPFIRE_SIGNAL_SMOKE = ofMoveable("campfire_signal_smoke");
    MoveableParticle CLOUD = ofMoveable("cloud");
    MoveableParticle COMPOSTER = ofMoveable("composter");
    StaticParticle CRIMSON_SPORE = ofStatic("crimson_spore");
    MoveableParticle CRIT = ofMoveable("crit");
    StaticParticle CURRENT_DOWN = ofStatic("current_down");
    MoveableParticle DAMAGE_INDICATOR = ofMoveable("damage_indicator");
    MoveableParticle DOLPHIN = ofMoveable("dolphin");
    MoveableParticle DRAGON_BREATH = ofMoveable("dragon_breath");
    StaticParticle DRIPPING_DRIPSTONE_LAVA = ofStatic("dripping_dripstone_lava");
    StaticParticle DRIPPING_DRIPSTONE_WATER = ofStatic("dripping_dripstone_water");
    StaticParticle DRIPPING_HONEY = ofStatic("dripping_honey");
    StaticParticle DRIPPING_LAVA = ofStatic("dripping_lava");
    StaticParticle DRIPPING_OBSIDIAN_TEAR = ofStatic("dripping_obsidian_tear");
    StaticParticle DRIPPING_WATER = ofStatic("dripping_water");
    ParticleType<SingleDustParticle, MultiDustParticle> DUST = of("dust", SingleDustParticle::new, MultiDustParticle::new);
    ParticleType<SingleDustTransitionParticle, MultiDustParticle> DUST_COLOR_TRANSITION = of("dust_color_transition", SingleDustTransitionParticle::new, MultiDustTransitionParticle::new);
    ParticleType<ReducedMomentumParticle, MultiSpeedModifiableParticle> EFFECT = of("effect", ReducedMomentumParticle::new, MultiSpeedModifiableParticle::new);
    StaticParticle ELDER_GUARDIAN = ofStatic("elder_guardian");
    MoveableParticle ELECTRIC_SPARK = ofMoveable("electric_spark");
    ParticleType<DestinationParticle, MultiSpeedModifiableParticle> ENCHANT = of("enchant", DestinationParticleImpl::new, MultiSpeedModifiableParticle::new);
    MoveableParticle ENCHANTED_HIT = ofMoveable("enchanted_hit");
    MoveableParticle END_ROD = ofMoveable("end_rod");
    ParticleType<SingleEntityEffectParticle, MultiEntityEffectParticle> ENTITY_EFFECT = of("entity_effect", SingleEntityEffectParticle::new, MultiEntityEffectParticle::new);
    ParticleType<SizeableParticle, MultiSizeParticle> EXPLOSION = of("explosion", SizeParticleImpl::new, MultiSizeParticle::new);
    StaticParticle EXPLOSION_EMITTER = ofStatic("explosion_emitter");
    StaticParticle FALLING_DRIPSTONE_LAVA = ofStatic("falling_dripstone_lava");
    StaticParticle FALLING_DRIPSTONE_WATER = ofStatic("falling_dripstone_water");
    ParticleType<SingleBlockDataParticle, MultiBlockDataParticle> FALLING_DUST = of("falling_dust", SingleBlockDataParticle::new, MultiBlockDataParticle::new);
    StaticParticle FALLING_HONEY = ofStatic("falling_honey");
    StaticParticle FALLING_LAVA = ofStatic("falling_lava");
    StaticParticle FALLING_NECTAR = ofStatic("falling_nectar");
    StaticParticle FALLING_OBSIDIAN_TEAR = ofStatic("falling_obsidian_tear");
    StaticParticle FALLING_SPORE_BLOSSOM = ofStatic("falling_spore_blossom");
    StaticParticle FALLING_WATER = ofStatic("falling_water");
    MoveableParticle FIREWORK = ofMoveable("firework");
    MoveableParticle FISHING = ofMoveable("fishing");
    MoveableParticle FLAME = ofMoveable("flame");
    StaticParticle FLASH = ofStatic("flash");
    ParticleType<ReducedMomentumParticle, MultiSpeedModifiableParticle> GLOW = of("glow", ReducedMomentumParticle::new, MultiSpeedModifiableParticle::new);
    MoveableParticle GLOW_SQUID_INK = ofMoveable("glow_squid_ink");
    MoveableParticle HAPPY_VILLAGER = ofMoveable("happy_villager");
    StaticParticle HEART = ofStatic("heart");
    ParticleType<YVelocityParticle, MultiSpeedModifiableParticle> INSTANT_EFFECT = of("instant_effect", YVelocityParticle::new, MultiSpeedModifiableParticle::new);
    ParticleType<SingleItemCrackParticle, MultiItemCrackParticle> ITEM = of("item", SingleItemCrackParticle::new, MultiItemCrackParticle::new);
    ParticleType<SingleItemCrackParticle, MultiItemCrackParticle> ITEM_SLIME = of("item_slime", SingleItemCrackParticle::new, MultiItemCrackParticle::new);
    ParticleType<SingleItemCrackParticle, MultiItemCrackParticle> ITEM_SNOWBALL = of("item_snowball", SingleItemCrackParticle::new, MultiItemCrackParticle::new);
    StaticParticle LANDING_HONEY = ofStatic("landing_honey");
    StaticParticle LANDING_LAVA = ofStatic("landing_lava");
    StaticParticle LANDING_OBSIDIAN_TEAR = ofStatic("landing_obsidian_tear");
    MoveableParticle LARGE_SMOKE = ofMoveable("large_smoke");
    StaticParticle LAVA = ofStatic("lava");
    MoveableParticle MYCELIUM = ofMoveable("mycelium");
    ParticleType<DestinationParticle, MultiSpeedModifiableParticle> NAUTILUS = of("nautilus", DestinationParticleImpl::new, MultiSpeedModifiableParticle::new);
    ParticleType<ColorableParticle, MultiNoteParticle> NOTE = of("note", SingleNoteParticle::new, MultiNoteParticle::new);
    MoveableParticle POOF = ofMoveable("poof");
    ParticleType<DestinationParticle, MultiSpeedModifiableParticle> PORTAL = of("portal", DestinationParticleImpl::new, MultiSpeedModifiableParticle::new);
    StaticParticle RAIN = ofStatic("rain");
    MoveableParticle REVERSE_PORTAL = ofMoveable("reverse_portal");
    MoveableParticle SCRAPE = ofMoveable("scrape");
    ParticleType<SingleSculkChargeParticle, MultiSculkChargeParticle> SCULK_CHARGE = of("sculk_charge", SingleSculkChargeParticle::new, MultiSculkChargeParticle::new);
    MoveableParticle SCULK_CHARGE_POP = ofMoveable("sculk_charge_pop");
    MoveableParticle SCULK_SOUL = ofMoveable("sculk_soul");
    ParticleType<SingleShriekParticle, MultiShriekParticle> SHRIEK = of("shriek", SingleShriekParticle::new, MultiShriekParticle::new);
    StaticParticle SONIC_BOOM = ofStatic("sonic_boom");
    MoveableParticle SMALL_FLAME = ofMoveable("small_flame");
    MoveableParticle SMOKE = ofMoveable("smoke");
    MoveableParticle SNEEZE = ofMoveable("sneeze");
    MoveableParticle SNOWFLAKE = ofMoveable("snowflake");
    MoveableParticle SOUL = ofMoveable("soul");
    MoveableParticle SOUL_FIRE_FLAME = ofMoveable("soul_fire_flame");
    MoveableParticle SPIT = ofMoveable("spit");
    MoveableParticle SPLASH = ofMoveable("splash");
    StaticParticle SPORE_BLOSSOM_AIR = ofStatic("spore_blossom_air");
    MoveableParticle SQUID_INK = ofMoveable("squid_ink");
    ParticleType<SizeableParticle, MultiSizeParticle> SWEEP_ATTACK = of("sweep_attack", SizeParticleImpl::new, MultiSizeParticle::new);
    MoveableParticle TOTEM_OF_UNDYING = ofMoveable("totem_of_undying");
    StaticParticle UNDERWATER = ofStatic("underwater");
    ParticleType<VibrationParticle, MultiVibrationParticle> VIBRATION = of("vibration", SingleVibrationParticle::new, MultiVibrationParticle::new);
    StaticParticle WARPED_SPORE = ofStatic("warped_spore");
    MoveableParticle WAX_OFF = ofMoveable("wax_off");
    MoveableParticle WAX_ON = ofMoveable("wax_on");
    StaticParticle WHITE_ASH = ofStatic("white_ash");
    ParticleType<YVelocityParticle, MultiSpeedModifiableParticle> WITCH = of("witch", YVelocityParticle::new, MultiSpeedModifiableParticle::new);

    private static MoveableParticle ofMoveable(String name) {
        return new MoveableParticle.ApiParticle(NamespacedKey.minecraft(name), VelocityParticle::new, MultiSpeedModifiableParticle::new);
    }

    private static StaticParticle ofStatic(String name) {
        return new StaticParticle.ApiParticle(NamespacedKey.minecraft(name), SimpleSingleParticle::new, SimpleMultiParticle::new);
    }

    private static <S extends Particle, M extends Particle> ParticleType<S, M> of(String name, Function<ParticleType<S, M>, S> supplier, Function<ParticleType<S, M>, M> supplier2) {
        return new ApiParticle<>(NamespacedKey.minecraft(name), supplier, supplier2);
    }

    static ParticleType<?, ?> fromBukkit(org.bukkit.Particle particle) {
        return switch (particle) {
            case EXPLOSION_NORMAL -> POOF;
            case EXPLOSION_LARGE -> EXPLOSION;
            case EXPLOSION_HUGE -> EXPLOSION_EMITTER;
            case FIREWORKS_SPARK -> FIREWORK;
            case WATER_BUBBLE -> BUBBLE;
            case WATER_SPLASH -> SPLASH;
            case WATER_WAKE -> FISHING;
            case SUSPENDED, SUSPENDED_DEPTH -> UNDERWATER;
            case CRIT -> CRIT;
            case CRIT_MAGIC -> ENCHANTED_HIT;
            case SMOKE_NORMAL -> SMOKE;
            case SMOKE_LARGE -> LARGE_SMOKE;
            case SPELL -> EFFECT;
            case SPELL_INSTANT -> INSTANT_EFFECT;
            case SPELL_MOB -> ENTITY_EFFECT;
            case SPELL_MOB_AMBIENT -> AMBIENT_ENTITY_EFFECT;
            case SPELL_WITCH -> WITCH;
            case DRIP_WATER -> DRIPPING_WATER;
            case DRIP_LAVA -> DRIPPING_LAVA;
            case VILLAGER_ANGRY -> ANGRY_VILLAGER;
            case VILLAGER_HAPPY -> HAPPY_VILLAGER;
            case TOWN_AURA -> MYCELIUM;
            case NOTE -> NOTE;
            case PORTAL -> PORTAL;
            case ENCHANTMENT_TABLE -> ENCHANT;
            case FLAME -> FLAME;
            case LAVA -> LAVA;
            case CLOUD -> CLOUD;
            case REDSTONE -> DUST;
            case SNOWBALL, SNOW_SHOVEL -> ITEM_SNOWBALL;
            case SLIME -> ITEM_SLIME;
            case HEART -> HEART;
            case ITEM_CRACK -> ITEM;
            case BLOCK_CRACK, BLOCK_DUST, LEGACY_BLOCK_CRACK, LEGACY_BLOCK_DUST -> BLOCK;
            case WATER_DROP -> RAIN;
            case MOB_APPEARANCE -> ELDER_GUARDIAN;
            case DRAGON_BREATH -> DRAGON_BREATH;
            case END_ROD -> END_ROD;
            case DAMAGE_INDICATOR -> DAMAGE_INDICATOR;
            case SWEEP_ATTACK -> SWEEP_ATTACK;
            case FALLING_DUST, LEGACY_FALLING_DUST -> FALLING_DUST;
            case TOTEM -> TOTEM_OF_UNDYING;
            case SPIT -> SPIT;
            case SQUID_INK -> SQUID_INK;
            case BUBBLE_POP -> BUBBLE_POP;
            case CURRENT_DOWN -> CURRENT_DOWN;
            case BUBBLE_COLUMN_UP -> BUBBLE_COLUMN_UP;
            case NAUTILUS -> NAUTILUS;
            case DOLPHIN -> DOLPHIN;
            case SNEEZE -> SNEEZE;
            case CAMPFIRE_COSY_SMOKE -> CAMPFIRE_COSY_SMOKE;
            case CAMPFIRE_SIGNAL_SMOKE -> CAMPFIRE_SIGNAL_SMOKE;
            case COMPOSTER -> COMPOSTER;
            case FLASH -> FLASH;
            case FALLING_LAVA -> FALLING_LAVA;
            case LANDING_LAVA -> LANDING_LAVA;
            case FALLING_WATER -> FALLING_WATER;
            case DRIPPING_HONEY -> DRIPPING_HONEY;
            case FALLING_HONEY -> FALLING_HONEY;
            case LANDING_HONEY -> LANDING_HONEY;
            case FALLING_NECTAR -> FALLING_NECTAR;
            case SOUL_FIRE_FLAME -> SOUL_FIRE_FLAME;
            case ASH -> ASH;
            case CRIMSON_SPORE -> CRIMSON_SPORE;
            case WARPED_SPORE -> WARPED_SPORE;
            case SOUL -> SOUL;
            case DRIPPING_OBSIDIAN_TEAR -> DRIPPING_OBSIDIAN_TEAR;
            case FALLING_OBSIDIAN_TEAR -> FALLING_OBSIDIAN_TEAR;
            case LANDING_OBSIDIAN_TEAR -> LANDING_OBSIDIAN_TEAR;
            case REVERSE_PORTAL -> REVERSE_PORTAL;
            case WHITE_ASH -> WHITE_ASH;
            case DUST_COLOR_TRANSITION -> DUST_COLOR_TRANSITION;
            case VIBRATION -> VIBRATION;
            case FALLING_SPORE_BLOSSOM -> FALLING_SPORE_BLOSSOM;
            case SPORE_BLOSSOM_AIR -> SPORE_BLOSSOM_AIR;
            case SMALL_FLAME -> SMALL_FLAME;
            case SNOWFLAKE -> SNOWFLAKE;
            case DRIPPING_DRIPSTONE_LAVA -> DRIPPING_DRIPSTONE_LAVA;
            case FALLING_DRIPSTONE_LAVA -> FALLING_DRIPSTONE_LAVA;
            case DRIPPING_DRIPSTONE_WATER -> DRIPPING_DRIPSTONE_WATER;
            case FALLING_DRIPSTONE_WATER -> FALLING_DRIPSTONE_WATER;
            case GLOW_SQUID_INK -> GLOW_SQUID_INK;
            case GLOW -> GLOW;
            case WAX_ON -> WAX_ON;
            case WAX_OFF -> WAX_OFF;
            case ELECTRIC_SPARK -> ELECTRIC_SPARK;
            case SCRAPE -> SCRAPE;
            case BLOCK_MARKER -> BLOCK_MARKER;
            case SHRIEK -> SHRIEK;
            case SCULK_SOUL -> SCULK_SOUL;
            case SCULK_CHARGE -> SCULK_CHARGE;
            case SCULK_CHARGE_POP -> SCULK_CHARGE_POP;
            case SONIC_BOOM -> SONIC_BOOM;
        };
    }

}
